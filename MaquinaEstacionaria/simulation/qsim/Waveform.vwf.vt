// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/07/2023 18:56:01"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MaquinaDestadosV1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MaquinaDestadosV1_vlg_sample_tst(
	C1,
	C2,
	CLK,
	Pop,
	Push,
	sampler_tx
);
input  C1;
input  C2;
input  CLK;
input  Pop;
input  Push;
output sampler_tx;

reg sample;
time current_time;
always @(C1 or C2 or CLK or Pop or Push)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MaquinaDestadosV1_vlg_check_tst (
	Dec,
	Empty,
	Full,
	INC,
	L,
	sampler_rx
);
input  Dec;
input  Empty;
input  Full;
input  INC;
input  L;
input sampler_rx;

reg  Dec_expected;
reg  Empty_expected;
reg  Full_expected;
reg  INC_expected;
reg  L_expected;

reg  Dec_prev;
reg  Empty_prev;
reg  Full_prev;
reg  INC_prev;
reg  L_prev;

reg  Dec_expected_prev;
reg  Empty_expected_prev;
reg  Full_expected_prev;
reg  INC_expected_prev;
reg  L_expected_prev;

reg  last_Dec_exp;
reg  last_Empty_exp;
reg  last_Full_exp;
reg  last_INC_exp;
reg  last_L_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	Dec_prev = Dec;
	Empty_prev = Empty;
	Full_prev = Full;
	INC_prev = INC;
	L_prev = L;
end

// update expected /o prevs

always @(trigger)
begin
	Dec_expected_prev = Dec_expected;
	Empty_expected_prev = Empty_expected;
	Full_expected_prev = Full_expected;
	INC_expected_prev = INC_expected;
	L_expected_prev = L_expected;
end



// expected Dec
initial
begin
	Dec_expected = 1'bX;
end 

// expected Empty
initial
begin
	Empty_expected = 1'bX;
end 

// expected Full
initial
begin
	Full_expected = 1'bX;
end 

// expected INC
initial
begin
	INC_expected = 1'bX;
end 

// expected L
initial
begin
	L_expected = 1'bX;
end 
// generate trigger
always @(Dec_expected or Dec or Empty_expected or Empty or Full_expected or Full or INC_expected or INC or L_expected or L)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Dec = %b | expected Empty = %b | expected Full = %b | expected INC = %b | expected L = %b | ",Dec_expected_prev,Empty_expected_prev,Full_expected_prev,INC_expected_prev,L_expected_prev);
	$display("| real Dec = %b | real Empty = %b | real Full = %b | real INC = %b | real L = %b | ",Dec_prev,Empty_prev,Full_prev,INC_prev,L_prev);
`endif
	if (
		( Dec_expected_prev !== 1'bx ) && ( Dec_prev !== Dec_expected_prev )
		&& ((Dec_expected_prev !== last_Dec_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dec :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dec_expected_prev);
		$display ("     Real value = %b", Dec_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Dec_exp = Dec_expected_prev;
	end
	if (
		( Empty_expected_prev !== 1'bx ) && ( Empty_prev !== Empty_expected_prev )
		&& ((Empty_expected_prev !== last_Empty_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Empty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Empty_expected_prev);
		$display ("     Real value = %b", Empty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Empty_exp = Empty_expected_prev;
	end
	if (
		( Full_expected_prev !== 1'bx ) && ( Full_prev !== Full_expected_prev )
		&& ((Full_expected_prev !== last_Full_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Full :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Full_expected_prev);
		$display ("     Real value = %b", Full_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Full_exp = Full_expected_prev;
	end
	if (
		( INC_expected_prev !== 1'bx ) && ( INC_prev !== INC_expected_prev )
		&& ((INC_expected_prev !== last_INC_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INC_expected_prev);
		$display ("     Real value = %b", INC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_INC_exp = INC_expected_prev;
	end
	if (
		( L_expected_prev !== 1'bx ) && ( L_prev !== L_expected_prev )
		&& ((L_expected_prev !== last_L_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port L :: @time = %t",  $realtime);
		$display ("     Expected value = %b", L_expected_prev);
		$display ("     Real value = %b", L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_L_exp = L_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MaquinaDestadosV1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C1;
reg C2;
reg CLK;
reg Pop;
reg Push;
// wires                                               
wire Dec;
wire Empty;
wire Full;
wire INC;
wire L;

wire sampler;                             

// assign statements (if any)                          
MaquinaDestadosV1 i1 (
// port map - connection between master ports and signals/registers   
	.C1(C1),
	.C2(C2),
	.CLK(CLK),
	.Dec(Dec),
	.Empty(Empty),
	.Full(Full),
	.INC(INC),
	.L(L),
	.Pop(Pop),
	.Push(Push)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #25000 1'b1;
	#25000;
end 

// C1
initial
begin
	C1 = 1'b0;
	C1 = #60000 1'b1;
	C1 = #40000 1'b0;
end 

// C2
initial
begin
	C2 = 1'b0;
end 

// Push
initial
begin
	Push = 1'b0;
end 

// Pop
initial
begin
	Pop = 1'b0;
end 

MaquinaDestadosV1_vlg_sample_tst tb_sample (
	.C1(C1),
	.C2(C2),
	.CLK(CLK),
	.Pop(Pop),
	.Push(Push),
	.sampler_tx(sampler)
);

MaquinaDestadosV1_vlg_check_tst tb_out(
	.Dec(Dec),
	.Empty(Empty),
	.Full(Full),
	.INC(INC),
	.L(L),
	.sampler_rx(sampler)
);
endmodule

